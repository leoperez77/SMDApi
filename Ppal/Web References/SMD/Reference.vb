'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace SMD
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="smdwsSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(MarshalByRefObject)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object())),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(SqlParameter()))>  _
    Partial Public Class smdws
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private JuanDiegoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatasetInf2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatasetInfOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatasetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataset2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerificarIPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Exec2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecSpReturnDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDsFromSpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDsFromSp2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmpresaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsuariosByEmpresaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStatusUsuarioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatosUsuarioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecSpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecSp2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutArchivoRecibidoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetArchivoRecibidoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelArchivoRecibidoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AbrirSQLConsultasOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RJ45OperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutCompraOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SMDPpal.My.MySettings.Default.SMDPpal_SMD_Ws
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event JuanDiegoCompleted As JuanDiegoCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatasetInf2Completed As GetDatasetInf2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatasetInfCompleted As GetDatasetInfCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatasetCompleted As GetDatasetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataset2Completed As GetDataset2CompletedEventHandler
        
        '''<remarks/>
        Public Event VerificarIPCompleted As VerificarIPCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecCompleted As ExecCompletedEventHandler
        
        '''<remarks/>
        Public Event Exec2Completed As Exec2CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecSpReturnDsCompleted As ExecSpReturnDsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDsFromSpCompleted As GetDsFromSpCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDsFromSp2Completed As GetDsFromSp2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmpresaCompleted As GetEmpresaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsuariosByEmpresaCompleted As GetUsuariosByEmpresaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStatusUsuarioCompleted As GetStatusUsuarioCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatosUsuarioCompleted As GetDatosUsuarioCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecSpCompleted As ExecSpCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecSp2Completed As ExecSp2CompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertImageCompleted As ConvertImageCompletedEventHandler
        
        '''<remarks/>
        Public Event PutArchivoRecibidoCompleted As PutArchivoRecibidoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetArchivoRecibidoCompleted As GetArchivoRecibidoCompletedEventHandler
        
        '''<remarks/>
        Public Event DelArchivoRecibidoCompleted As DelArchivoRecibidoCompletedEventHandler
        
        '''<remarks/>
        Public Event AbrirSQLConsultasCompleted As AbrirSQLConsultasCompletedEventHandler
        
        '''<remarks/>
        Public Event RJ45Completed As RJ45CompletedEventHandler
        
        '''<remarks/>
        Public Event PutCompraCompleted As PutCompraCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/JuanDiego", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function JuanDiego(ByVal Empresa As String, ByVal Usuario As String, ByVal Clave As String) As Boolean
            Dim results() As Object = Me.Invoke("JuanDiego", New Object() {Empresa, Usuario, Clave})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub JuanDiegoAsync(ByVal Empresa As String, ByVal Usuario As String, ByVal Clave As String)
            Me.JuanDiegoAsync(Empresa, Usuario, Clave, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub JuanDiegoAsync(ByVal Empresa As String, ByVal Usuario As String, ByVal Clave As String, ByVal userState As Object)
            If (Me.JuanDiegoOperationCompleted Is Nothing) Then
                Me.JuanDiegoOperationCompleted = AddressOf Me.OnJuanDiegoOperationCompleted
            End If
            Me.InvokeAsync("JuanDiego", New Object() {Empresa, Usuario, Clave}, Me.JuanDiegoOperationCompleted, userState)
        End Sub
        
        Private Sub OnJuanDiegoOperationCompleted(ByVal arg As Object)
            If (Not (Me.JuanDiegoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent JuanDiegoCompleted(Me, New JuanDiegoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Login(ByVal Empresa As String, ByVal Usuario As String, ByVal Clave As String) As Boolean
            Dim results() As Object = Me.Invoke("Login", New Object() {Empresa, Usuario, Clave})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal Empresa As String, ByVal Usuario As String, ByVal Clave As String)
            Me.LoginAsync(Empresa, Usuario, Clave, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal Empresa As String, ByVal Usuario As String, ByVal Clave As String, ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object() {Empresa, Usuario, Clave}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDatasetInf2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDatasetInf2(ByVal Sql As String, ByVal Key As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetDatasetInf2", New Object() {Sql, Key})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatasetInf2Async(ByVal Sql As String, ByVal Key As String)
            Me.GetDatasetInf2Async(Sql, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatasetInf2Async(ByVal Sql As String, ByVal Key As String, ByVal userState As Object)
            If (Me.GetDatasetInf2OperationCompleted Is Nothing) Then
                Me.GetDatasetInf2OperationCompleted = AddressOf Me.OnGetDatasetInf2OperationCompleted
            End If
            Me.InvokeAsync("GetDatasetInf2", New Object() {Sql, Key}, Me.GetDatasetInf2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatasetInf2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatasetInf2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatasetInf2Completed(Me, New GetDatasetInf2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDatasetInf", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDatasetInf(ByVal Sql As String, ByVal Key As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetDatasetInf", New Object() {Sql, Key})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatasetInfAsync(ByVal Sql As String, ByVal Key As String)
            Me.GetDatasetInfAsync(Sql, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatasetInfAsync(ByVal Sql As String, ByVal Key As String, ByVal userState As Object)
            If (Me.GetDatasetInfOperationCompleted Is Nothing) Then
                Me.GetDatasetInfOperationCompleted = AddressOf Me.OnGetDatasetInfOperationCompleted
            End If
            Me.InvokeAsync("GetDatasetInf", New Object() {Sql, Key}, Me.GetDatasetInfOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatasetInfOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatasetInfCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatasetInfCompleted(Me, New GetDatasetInfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataset", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataset(ByVal Sql As String, ByVal Key As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDataset", New Object() {Sql, Key})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatasetAsync(ByVal Sql As String, ByVal Key As String)
            Me.GetDatasetAsync(Sql, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatasetAsync(ByVal Sql As String, ByVal Key As String, ByVal userState As Object)
            If (Me.GetDatasetOperationCompleted Is Nothing) Then
                Me.GetDatasetOperationCompleted = AddressOf Me.OnGetDatasetOperationCompleted
            End If
            Me.InvokeAsync("GetDataset", New Object() {Sql, Key}, Me.GetDatasetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatasetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatasetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatasetCompleted(Me, New GetDatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataset2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataset2(ByVal Sql As String, ByVal Key As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDataset2", New Object() {Sql, Key})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataset2Async(ByVal Sql As String, ByVal Key As String)
            Me.GetDataset2Async(Sql, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataset2Async(ByVal Sql As String, ByVal Key As String, ByVal userState As Object)
            If (Me.GetDataset2OperationCompleted Is Nothing) Then
                Me.GetDataset2OperationCompleted = AddressOf Me.OnGetDataset2OperationCompleted
            End If
            Me.InvokeAsync("GetDataset2", New Object() {Sql, Key}, Me.GetDataset2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataset2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataset2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataset2Completed(Me, New GetDataset2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerificarIP", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function VerificarIP() As String
            Dim results() As Object = Me.Invoke("VerificarIP", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerificarIPAsync()
            Me.VerificarIPAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerificarIPAsync(ByVal userState As Object)
            If (Me.VerificarIPOperationCompleted Is Nothing) Then
                Me.VerificarIPOperationCompleted = AddressOf Me.OnVerificarIPOperationCompleted
            End If
            Me.InvokeAsync("VerificarIP", New Object(-1) {}, Me.VerificarIPOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerificarIPOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerificarIPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerificarIPCompleted(Me, New VerificarIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Exec", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Exec(ByVal Sql As String, ByVal Key As String)
            Me.Invoke("Exec", New Object() {Sql, Key})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecAsync(ByVal Sql As String, ByVal Key As String)
            Me.ExecAsync(Sql, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecAsync(ByVal Sql As String, ByVal Key As String, ByVal userState As Object)
            If (Me.ExecOperationCompleted Is Nothing) Then
                Me.ExecOperationCompleted = AddressOf Me.OnExecOperationCompleted
            End If
            Me.InvokeAsync("Exec", New Object() {Sql, Key}, Me.ExecOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Exec2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Exec2(ByVal Sql As String, ByVal Key As String)
            Me.Invoke("Exec2", New Object() {Sql, Key})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Exec2Async(ByVal Sql As String, ByVal Key As String)
            Me.Exec2Async(Sql, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Exec2Async(ByVal Sql As String, ByVal Key As String, ByVal userState As Object)
            If (Me.Exec2OperationCompleted Is Nothing) Then
                Me.Exec2OperationCompleted = AddressOf Me.OnExec2OperationCompleted
            End If
            Me.InvokeAsync("Exec2", New Object() {Sql, Key}, Me.Exec2OperationCompleted, userState)
        End Sub
        
        Private Sub OnExec2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Exec2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Exec2Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecSpReturnDs", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecSpReturnDs(ByVal Sp As String, ByVal Key As String, ByVal Params() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ExecSpReturnDs", New Object() {Sp, Key, Params})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecSpReturnDsAsync(ByVal Sp As String, ByVal Key As String, ByVal Params() As Object)
            Me.ExecSpReturnDsAsync(Sp, Key, Params, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecSpReturnDsAsync(ByVal Sp As String, ByVal Key As String, ByVal Params() As Object, ByVal userState As Object)
            If (Me.ExecSpReturnDsOperationCompleted Is Nothing) Then
                Me.ExecSpReturnDsOperationCompleted = AddressOf Me.OnExecSpReturnDsOperationCompleted
            End If
            Me.InvokeAsync("ExecSpReturnDs", New Object() {Sp, Key, Params}, Me.ExecSpReturnDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecSpReturnDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecSpReturnDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecSpReturnDsCompleted(Me, New ExecSpReturnDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDsFromSp", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDsFromSp(ByVal Sp As String, ByVal Key As String, ByVal Params() As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDsFromSp", New Object() {Sp, Key, Params})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDsFromSpAsync(ByVal Sp As String, ByVal Key As String, ByVal Params() As String)
            Me.GetDsFromSpAsync(Sp, Key, Params, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDsFromSpAsync(ByVal Sp As String, ByVal Key As String, ByVal Params() As String, ByVal userState As Object)
            If (Me.GetDsFromSpOperationCompleted Is Nothing) Then
                Me.GetDsFromSpOperationCompleted = AddressOf Me.OnGetDsFromSpOperationCompleted
            End If
            Me.InvokeAsync("GetDsFromSp", New Object() {Sp, Key, Params}, Me.GetDsFromSpOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDsFromSpOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDsFromSpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDsFromSpCompleted(Me, New GetDsFromSpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDsFromSp2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDsFromSp2(ByVal Sp As String, ByVal Key As String, ByVal Params() As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDsFromSp2", New Object() {Sp, Key, Params})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDsFromSp2Async(ByVal Sp As String, ByVal Key As String, ByVal Params() As String)
            Me.GetDsFromSp2Async(Sp, Key, Params, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDsFromSp2Async(ByVal Sp As String, ByVal Key As String, ByVal Params() As String, ByVal userState As Object)
            If (Me.GetDsFromSp2OperationCompleted Is Nothing) Then
                Me.GetDsFromSp2OperationCompleted = AddressOf Me.OnGetDsFromSp2OperationCompleted
            End If
            Me.InvokeAsync("GetDsFromSp2", New Object() {Sp, Key, Params}, Me.GetDsFromSp2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDsFromSp2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDsFromSp2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDsFromSp2Completed(Me, New GetDsFromSp2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEmpresa", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmpresa(ByVal Empresa As String, ByVal Key As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEmpresa", New Object() {Empresa, Key})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmpresaAsync(ByVal Empresa As String, ByVal Key As String)
            Me.GetEmpresaAsync(Empresa, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmpresaAsync(ByVal Empresa As String, ByVal Key As String, ByVal userState As Object)
            If (Me.GetEmpresaOperationCompleted Is Nothing) Then
                Me.GetEmpresaOperationCompleted = AddressOf Me.OnGetEmpresaOperationCompleted
            End If
            Me.InvokeAsync("GetEmpresa", New Object() {Empresa, Key}, Me.GetEmpresaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmpresaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmpresaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmpresaCompleted(Me, New GetEmpresaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUsuariosByEmpresa", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsuariosByEmpresa(ByVal IdUsuario As Integer, ByVal Externos As Integer, ByVal IdEmpresa As Integer, ByVal Agrupar As Byte, ByVal Admin As Byte, ByVal Key As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUsuariosByEmpresa", New Object() {IdUsuario, Externos, IdEmpresa, Agrupar, Admin, Key})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsuariosByEmpresaAsync(ByVal IdUsuario As Integer, ByVal Externos As Integer, ByVal IdEmpresa As Integer, ByVal Agrupar As Byte, ByVal Admin As Byte, ByVal Key As String)
            Me.GetUsuariosByEmpresaAsync(IdUsuario, Externos, IdEmpresa, Agrupar, Admin, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsuariosByEmpresaAsync(ByVal IdUsuario As Integer, ByVal Externos As Integer, ByVal IdEmpresa As Integer, ByVal Agrupar As Byte, ByVal Admin As Byte, ByVal Key As String, ByVal userState As Object)
            If (Me.GetUsuariosByEmpresaOperationCompleted Is Nothing) Then
                Me.GetUsuariosByEmpresaOperationCompleted = AddressOf Me.OnGetUsuariosByEmpresaOperationCompleted
            End If
            Me.InvokeAsync("GetUsuariosByEmpresa", New Object() {IdUsuario, Externos, IdEmpresa, Agrupar, Admin, Key}, Me.GetUsuariosByEmpresaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsuariosByEmpresaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsuariosByEmpresaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsuariosByEmpresaCompleted(Me, New GetUsuariosByEmpresaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStatusUsuario", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStatusUsuario(ByVal IdUsuario As String, ByVal Key As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStatusUsuario", New Object() {IdUsuario, Key})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStatusUsuarioAsync(ByVal IdUsuario As String, ByVal Key As String)
            Me.GetStatusUsuarioAsync(IdUsuario, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStatusUsuarioAsync(ByVal IdUsuario As String, ByVal Key As String, ByVal userState As Object)
            If (Me.GetStatusUsuarioOperationCompleted Is Nothing) Then
                Me.GetStatusUsuarioOperationCompleted = AddressOf Me.OnGetStatusUsuarioOperationCompleted
            End If
            Me.InvokeAsync("GetStatusUsuario", New Object() {IdUsuario, Key}, Me.GetStatusUsuarioOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStatusUsuarioOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStatusUsuarioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStatusUsuarioCompleted(Me, New GetStatusUsuarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDatosUsuario", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDatosUsuario(ByVal CodigoUsuario As String, ByVal IdEmpresa As Integer, ByVal Key As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDatosUsuario", New Object() {CodigoUsuario, IdEmpresa, Key})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatosUsuarioAsync(ByVal CodigoUsuario As String, ByVal IdEmpresa As Integer, ByVal Key As String)
            Me.GetDatosUsuarioAsync(CodigoUsuario, IdEmpresa, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatosUsuarioAsync(ByVal CodigoUsuario As String, ByVal IdEmpresa As Integer, ByVal Key As String, ByVal userState As Object)
            If (Me.GetDatosUsuarioOperationCompleted Is Nothing) Then
                Me.GetDatosUsuarioOperationCompleted = AddressOf Me.OnGetDatosUsuarioOperationCompleted
            End If
            Me.InvokeAsync("GetDatosUsuario", New Object() {CodigoUsuario, IdEmpresa, Key}, Me.GetDatosUsuarioOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatosUsuarioOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatosUsuarioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatosUsuarioCompleted(Me, New GetDatosUsuarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecSp", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecSp(ByVal Sp As String, ByVal Key As String, ByVal Params() As String) As Integer
            Dim results() As Object = Me.Invoke("ExecSp", New Object() {Sp, Key, Params})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecSpAsync(ByVal Sp As String, ByVal Key As String, ByVal Params() As String)
            Me.ExecSpAsync(Sp, Key, Params, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecSpAsync(ByVal Sp As String, ByVal Key As String, ByVal Params() As String, ByVal userState As Object)
            If (Me.ExecSpOperationCompleted Is Nothing) Then
                Me.ExecSpOperationCompleted = AddressOf Me.OnExecSpOperationCompleted
            End If
            Me.InvokeAsync("ExecSp", New Object() {Sp, Key, Params}, Me.ExecSpOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecSpOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecSpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecSpCompleted(Me, New ExecSpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecSp2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecSp2(ByVal Sp As String, ByVal Key As String, ByVal Params() As String) As Integer
            Dim results() As Object = Me.Invoke("ExecSp2", New Object() {Sp, Key, Params})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecSp2Async(ByVal Sp As String, ByVal Key As String, ByVal Params() As String)
            Me.ExecSp2Async(Sp, Key, Params, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecSp2Async(ByVal Sp As String, ByVal Key As String, ByVal Params() As String, ByVal userState As Object)
            If (Me.ExecSp2OperationCompleted Is Nothing) Then
                Me.ExecSp2OperationCompleted = AddressOf Me.OnExecSp2OperationCompleted
            End If
            Me.InvokeAsync("ExecSp2", New Object() {Sp, Key, Params}, Me.ExecSp2OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecSp2OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecSp2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecSp2Completed(Me, New ExecSp2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertImage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertImage(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal bytInFile() As Byte, ByVal intToFormat As Integer, ByVal FileName As String, ByVal Tabla As String, ByVal Id As Integer) As Integer
            Dim results() As Object = Me.Invoke("ConvertImage", New Object() {bytInFile, intToFormat, FileName, Tabla, Id})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertImageAsync(ByVal bytInFile() As Byte, ByVal intToFormat As Integer, ByVal FileName As String, ByVal Tabla As String, ByVal Id As Integer)
            Me.ConvertImageAsync(bytInFile, intToFormat, FileName, Tabla, Id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertImageAsync(ByVal bytInFile() As Byte, ByVal intToFormat As Integer, ByVal FileName As String, ByVal Tabla As String, ByVal Id As Integer, ByVal userState As Object)
            If (Me.ConvertImageOperationCompleted Is Nothing) Then
                Me.ConvertImageOperationCompleted = AddressOf Me.OnConvertImageOperationCompleted
            End If
            Me.InvokeAsync("ConvertImage", New Object() {bytInFile, intToFormat, FileName, Tabla, Id}, Me.ConvertImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertImageCompleted(Me, New ConvertImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutArchivoRecibido", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub PutArchivoRecibido(ByVal Key As String, ByVal NombreArchivo As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Archivo() As Byte, ByVal QuePrograma As String, ByVal Id As Integer)
            Me.Invoke("PutArchivoRecibido", New Object() {Key, NombreArchivo, Archivo, QuePrograma, Id})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutArchivoRecibidoAsync(ByVal Key As String, ByVal NombreArchivo As String, ByVal Archivo() As Byte, ByVal QuePrograma As String, ByVal Id As Integer)
            Me.PutArchivoRecibidoAsync(Key, NombreArchivo, Archivo, QuePrograma, Id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutArchivoRecibidoAsync(ByVal Key As String, ByVal NombreArchivo As String, ByVal Archivo() As Byte, ByVal QuePrograma As String, ByVal Id As Integer, ByVal userState As Object)
            If (Me.PutArchivoRecibidoOperationCompleted Is Nothing) Then
                Me.PutArchivoRecibidoOperationCompleted = AddressOf Me.OnPutArchivoRecibidoOperationCompleted
            End If
            Me.InvokeAsync("PutArchivoRecibido", New Object() {Key, NombreArchivo, Archivo, QuePrograma, Id}, Me.PutArchivoRecibidoOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutArchivoRecibidoOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutArchivoRecibidoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutArchivoRecibidoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetArchivoRecibido", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetArchivoRecibido(ByVal Key As String, ByVal NombreArchivo As String, ByVal QuePrograma As String, ByVal Id As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetArchivoRecibido", New Object() {Key, NombreArchivo, QuePrograma, Id})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetArchivoRecibidoAsync(ByVal Key As String, ByVal NombreArchivo As String, ByVal QuePrograma As String, ByVal Id As Integer)
            Me.GetArchivoRecibidoAsync(Key, NombreArchivo, QuePrograma, Id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetArchivoRecibidoAsync(ByVal Key As String, ByVal NombreArchivo As String, ByVal QuePrograma As String, ByVal Id As Integer, ByVal userState As Object)
            If (Me.GetArchivoRecibidoOperationCompleted Is Nothing) Then
                Me.GetArchivoRecibidoOperationCompleted = AddressOf Me.OnGetArchivoRecibidoOperationCompleted
            End If
            Me.InvokeAsync("GetArchivoRecibido", New Object() {Key, NombreArchivo, QuePrograma, Id}, Me.GetArchivoRecibidoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetArchivoRecibidoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetArchivoRecibidoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetArchivoRecibidoCompleted(Me, New GetArchivoRecibidoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelArchivoRecibido", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DelArchivoRecibido(ByVal Key As String, ByVal QuePrograma As String, ByVal Id As Integer)
            Me.Invoke("DelArchivoRecibido", New Object() {Key, QuePrograma, Id})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelArchivoRecibidoAsync(ByVal Key As String, ByVal QuePrograma As String, ByVal Id As Integer)
            Me.DelArchivoRecibidoAsync(Key, QuePrograma, Id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelArchivoRecibidoAsync(ByVal Key As String, ByVal QuePrograma As String, ByVal Id As Integer, ByVal userState As Object)
            If (Me.DelArchivoRecibidoOperationCompleted Is Nothing) Then
                Me.DelArchivoRecibidoOperationCompleted = AddressOf Me.OnDelArchivoRecibidoOperationCompleted
            End If
            Me.InvokeAsync("DelArchivoRecibido", New Object() {Key, QuePrograma, Id}, Me.DelArchivoRecibidoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelArchivoRecibidoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelArchivoRecibidoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelArchivoRecibidoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AbrirSQLConsultas", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AbrirSQLConsultas(ByVal Sql As String, ByVal User As Short, ByVal Key As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("AbrirSQLConsultas", New Object() {Sql, User, Key})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AbrirSQLConsultasAsync(ByVal Sql As String, ByVal User As Short, ByVal Key As String)
            Me.AbrirSQLConsultasAsync(Sql, User, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AbrirSQLConsultasAsync(ByVal Sql As String, ByVal User As Short, ByVal Key As String, ByVal userState As Object)
            If (Me.AbrirSQLConsultasOperationCompleted Is Nothing) Then
                Me.AbrirSQLConsultasOperationCompleted = AddressOf Me.OnAbrirSQLConsultasOperationCompleted
            End If
            Me.InvokeAsync("AbrirSQLConsultas", New Object() {Sql, User, Key}, Me.AbrirSQLConsultasOperationCompleted, userState)
        End Sub
        
        Private Sub OnAbrirSQLConsultasOperationCompleted(ByVal arg As Object)
            If (Not (Me.AbrirSQLConsultasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AbrirSQLConsultasCompleted(Me, New AbrirSQLConsultasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RJ45", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RJ45(ByVal Par1 As String, ByVal Par2 As String, ByVal Par3 As String) As String
            Dim results() As Object = Me.Invoke("RJ45", New Object() {Par1, Par2, Par3})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RJ45Async(ByVal Par1 As String, ByVal Par2 As String, ByVal Par3 As String)
            Me.RJ45Async(Par1, Par2, Par3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RJ45Async(ByVal Par1 As String, ByVal Par2 As String, ByVal Par3 As String, ByVal userState As Object)
            If (Me.RJ45OperationCompleted Is Nothing) Then
                Me.RJ45OperationCompleted = AddressOf Me.OnRJ45OperationCompleted
            End If
            Me.InvokeAsync("RJ45", New Object() {Par1, Par2, Par3}, Me.RJ45OperationCompleted, userState)
        End Sub
        
        Private Sub OnRJ45OperationCompleted(ByVal arg As Object)
            If (Not (Me.RJ45CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RJ45Completed(Me, New RJ45CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutCompra", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutCompra( _
                    ByVal IdEmpresa As Integer,  _
                    ByVal IdUsuarioCrea As Integer,  _
                    ByVal IdCompra As Integer,  _
                    ByVal IdBodega As Integer,  _
                    ByVal IdUsuario As Integer,  _
                    ByVal IdOrdenCompra As Integer,  _
                    ByVal Fecha As Date,  _
                    ByVal IdTipo As Integer,  _
                    ByVal IdCliente As Integer,  _
                    ByVal IdVendedor As Integer,  _
                    ByVal IdFormaPago As Integer,  _
                    ByVal Dias As Short,  _
                    ByVal Subtotal As Decimal,  _
                    ByVal Descuento As Decimal,  _
                    ByVal Iva As Decimal,  _
                    ByVal Total As Decimal,  _
                    ByVal Moneda As Integer,  _
                    ByVal Notas As String,  _
                    ByVal Anulada As Short,  _
                    ByVal Retencion1 As Decimal,  _
                    ByVal Retencion2 As Decimal,  _
                    ByVal Retencion3 As Decimal,  _
                    ByVal Retencion4 As Decimal,  _
                    ByVal Retencion5 As Decimal,  _
                    ByVal Retencion6 As Decimal,  _
                    ByVal TipoReferencia As String,  _
                    ByVal NumeroReferencia As String,  _
                    ByVal IdContacto As Integer,  _
                    ByVal IdImportacion As Integer,  _
                    ByVal Fletes As Decimal,  _
                    ByVal IvaFlete As Decimal,  _
                    ByVal PorcRetencion1 As Decimal,  _
                    ByVal PorcRetencion2 As Decimal,  _
                    ByVal PorcRetencion3 As Decimal,  _
                    ByVal PorcRetencion4 As Decimal,  _
                    ByVal PorcRetencion5 As Decimal,  _
                    ByVal PorcRetencion6 As Decimal,  _
                    ByVal FechaCartera As Date,  _
                    ByVal Ajuste As Decimal,  _
                    ByVal Detalle As System.Data.DataSet) As Integer
            Dim results() As Object = Me.Invoke("PutCompra", New Object() {IdEmpresa, IdUsuarioCrea, IdCompra, IdBodega, IdUsuario, IdOrdenCompra, Fecha, IdTipo, IdCliente, IdVendedor, IdFormaPago, Dias, Subtotal, Descuento, Iva, Total, Moneda, Notas, Anulada, Retencion1, Retencion2, Retencion3, Retencion4, Retencion5, Retencion6, TipoReferencia, NumeroReferencia, IdContacto, IdImportacion, Fletes, IvaFlete, PorcRetencion1, PorcRetencion2, PorcRetencion3, PorcRetencion4, PorcRetencion5, PorcRetencion6, FechaCartera, Ajuste, Detalle})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutCompraAsync( _
                    ByVal IdEmpresa As Integer,  _
                    ByVal IdUsuarioCrea As Integer,  _
                    ByVal IdCompra As Integer,  _
                    ByVal IdBodega As Integer,  _
                    ByVal IdUsuario As Integer,  _
                    ByVal IdOrdenCompra As Integer,  _
                    ByVal Fecha As Date,  _
                    ByVal IdTipo As Integer,  _
                    ByVal IdCliente As Integer,  _
                    ByVal IdVendedor As Integer,  _
                    ByVal IdFormaPago As Integer,  _
                    ByVal Dias As Short,  _
                    ByVal Subtotal As Decimal,  _
                    ByVal Descuento As Decimal,  _
                    ByVal Iva As Decimal,  _
                    ByVal Total As Decimal,  _
                    ByVal Moneda As Integer,  _
                    ByVal Notas As String,  _
                    ByVal Anulada As Short,  _
                    ByVal Retencion1 As Decimal,  _
                    ByVal Retencion2 As Decimal,  _
                    ByVal Retencion3 As Decimal,  _
                    ByVal Retencion4 As Decimal,  _
                    ByVal Retencion5 As Decimal,  _
                    ByVal Retencion6 As Decimal,  _
                    ByVal TipoReferencia As String,  _
                    ByVal NumeroReferencia As String,  _
                    ByVal IdContacto As Integer,  _
                    ByVal IdImportacion As Integer,  _
                    ByVal Fletes As Decimal,  _
                    ByVal IvaFlete As Decimal,  _
                    ByVal PorcRetencion1 As Decimal,  _
                    ByVal PorcRetencion2 As Decimal,  _
                    ByVal PorcRetencion3 As Decimal,  _
                    ByVal PorcRetencion4 As Decimal,  _
                    ByVal PorcRetencion5 As Decimal,  _
                    ByVal PorcRetencion6 As Decimal,  _
                    ByVal FechaCartera As Date,  _
                    ByVal Ajuste As Decimal,  _
                    ByVal Detalle As System.Data.DataSet)
            Me.PutCompraAsync(IdEmpresa, IdUsuarioCrea, IdCompra, IdBodega, IdUsuario, IdOrdenCompra, Fecha, IdTipo, IdCliente, IdVendedor, IdFormaPago, Dias, Subtotal, Descuento, Iva, Total, Moneda, Notas, Anulada, Retencion1, Retencion2, Retencion3, Retencion4, Retencion5, Retencion6, TipoReferencia, NumeroReferencia, IdContacto, IdImportacion, Fletes, IvaFlete, PorcRetencion1, PorcRetencion2, PorcRetencion3, PorcRetencion4, PorcRetencion5, PorcRetencion6, FechaCartera, Ajuste, Detalle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutCompraAsync( _
                    ByVal IdEmpresa As Integer,  _
                    ByVal IdUsuarioCrea As Integer,  _
                    ByVal IdCompra As Integer,  _
                    ByVal IdBodega As Integer,  _
                    ByVal IdUsuario As Integer,  _
                    ByVal IdOrdenCompra As Integer,  _
                    ByVal Fecha As Date,  _
                    ByVal IdTipo As Integer,  _
                    ByVal IdCliente As Integer,  _
                    ByVal IdVendedor As Integer,  _
                    ByVal IdFormaPago As Integer,  _
                    ByVal Dias As Short,  _
                    ByVal Subtotal As Decimal,  _
                    ByVal Descuento As Decimal,  _
                    ByVal Iva As Decimal,  _
                    ByVal Total As Decimal,  _
                    ByVal Moneda As Integer,  _
                    ByVal Notas As String,  _
                    ByVal Anulada As Short,  _
                    ByVal Retencion1 As Decimal,  _
                    ByVal Retencion2 As Decimal,  _
                    ByVal Retencion3 As Decimal,  _
                    ByVal Retencion4 As Decimal,  _
                    ByVal Retencion5 As Decimal,  _
                    ByVal Retencion6 As Decimal,  _
                    ByVal TipoReferencia As String,  _
                    ByVal NumeroReferencia As String,  _
                    ByVal IdContacto As Integer,  _
                    ByVal IdImportacion As Integer,  _
                    ByVal Fletes As Decimal,  _
                    ByVal IvaFlete As Decimal,  _
                    ByVal PorcRetencion1 As Decimal,  _
                    ByVal PorcRetencion2 As Decimal,  _
                    ByVal PorcRetencion3 As Decimal,  _
                    ByVal PorcRetencion4 As Decimal,  _
                    ByVal PorcRetencion5 As Decimal,  _
                    ByVal PorcRetencion6 As Decimal,  _
                    ByVal FechaCartera As Date,  _
                    ByVal Ajuste As Decimal,  _
                    ByVal Detalle As System.Data.DataSet,  _
                    ByVal userState As Object)
            If (Me.PutCompraOperationCompleted Is Nothing) Then
                Me.PutCompraOperationCompleted = AddressOf Me.OnPutCompraOperationCompleted
            End If
            Me.InvokeAsync("PutCompra", New Object() {IdEmpresa, IdUsuarioCrea, IdCompra, IdBodega, IdUsuario, IdOrdenCompra, Fecha, IdTipo, IdCliente, IdVendedor, IdFormaPago, Dias, Subtotal, Descuento, Iva, Total, Moneda, Notas, Anulada, Retencion1, Retencion2, Retencion3, Retencion4, Retencion5, Retencion6, TipoReferencia, NumeroReferencia, IdContacto, IdImportacion, Fletes, IvaFlete, PorcRetencion1, PorcRetencion2, PorcRetencion3, PorcRetencion4, PorcRetencion5, PorcRetencion6, FechaCartera, Ajuste, Detalle}, Me.PutCompraOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutCompraOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutCompraCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutCompraCompleted(Me, New PutCompraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(DbParameter)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(SqlParameter)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public MustInherit Class MarshalByRefObject
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(SqlParameter)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public MustInherit Class DbParameter
        Inherits MarshalByRefObject
        
        Private dbTypeField As DbType
        
        Private directionField As ParameterDirection
        
        Private isNullableField As Boolean
        
        Private parameterNameField As String
        
        Private precisionField As Byte
        
        Private scaleField As Byte
        
        Private sizeField As Integer
        
        Private sourceColumnField As String
        
        Private sourceColumnNullMappingField As Boolean
        
        Private sourceVersionField As DataRowVersion
        
        Private valueField As Object
        
        Public Sub New()
            MyBase.New
            Me.directionField = ParameterDirection.Input
            Me.parameterNameField = ""
            Me.sourceColumnField = ""
            Me.sourceColumnNullMappingField = false
            Me.sourceVersionField = DataRowVersion.Current
        End Sub
        
        '''<remarks/>
        Public Property DbType() As DbType
            Get
                Return Me.dbTypeField
            End Get
            Set
                Me.dbTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute(ParameterDirection.Input)>  _
        Public Property Direction() As ParameterDirection
            Get
                Return Me.directionField
            End Get
            Set
                Me.directionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsNullable() As Boolean
            Get
                Return Me.isNullableField
            End Get
            Set
                Me.isNullableField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute("")>  _
        Public Property ParameterName() As String
            Get
                Return Me.parameterNameField
            End Get
            Set
                Me.parameterNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Precision() As Byte
            Get
                Return Me.precisionField
            End Get
            Set
                Me.precisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Scale() As Byte
            Get
                Return Me.scaleField
            End Get
            Set
                Me.scaleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Size() As Integer
            Get
                Return Me.sizeField
            End Get
            Set
                Me.sizeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute("")>  _
        Public Property SourceColumn() As String
            Get
                Return Me.sourceColumnField
            End Get
            Set
                Me.sourceColumnField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute(false)>  _
        Public Property SourceColumnNullMapping() As Boolean
            Get
                Return Me.sourceColumnNullMappingField
            End Get
            Set
                Me.sourceColumnNullMappingField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute(DataRowVersion.Current)>  _
        Public Property SourceVersion() As DataRowVersion
            Get
                Return Me.sourceVersionField
            End Get
            Set
                Me.sourceVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As Object
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum DbType
        
        '''<remarks/>
        AnsiString
        
        '''<remarks/>
        Binary
        
        '''<remarks/>
        [Byte]
        
        '''<remarks/>
        [Boolean]
        
        '''<remarks/>
        Currency
        
        '''<remarks/>
        [Date]
        
        '''<remarks/>
        DateTime
        
        '''<remarks/>
        [Decimal]
        
        '''<remarks/>
        [Double]
        
        '''<remarks/>
        Guid
        
        '''<remarks/>
        Int16
        
        '''<remarks/>
        Int32
        
        '''<remarks/>
        Int64
        
        '''<remarks/>
        [Object]
        
        '''<remarks/>
        [SByte]
        
        '''<remarks/>
        [Single]
        
        '''<remarks/>
        [String]
        
        '''<remarks/>
        Time
        
        '''<remarks/>
        UInt16
        
        '''<remarks/>
        UInt32
        
        '''<remarks/>
        UInt64
        
        '''<remarks/>
        VarNumeric
        
        '''<remarks/>
        AnsiStringFixedLength
        
        '''<remarks/>
        StringFixedLength
        
        '''<remarks/>
        Xml
        
        '''<remarks/>
        DateTime2
        
        '''<remarks/>
        DateTimeOffset
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum ParameterDirection
        
        '''<remarks/>
        Input
        
        '''<remarks/>
        Output
        
        '''<remarks/>
        InputOutput
        
        '''<remarks/>
        ReturnValue
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum DataRowVersion
        
        '''<remarks/>
        Original
        
        '''<remarks/>
        Current
        
        '''<remarks/>
        Proposed
        
        '''<remarks/>
        [Default]
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class SqlParameter
        Inherits DbParameter
        
        Private compareInfoField As SqlCompareOptions
        
        Private xmlSchemaCollectionDatabaseField As String
        
        Private xmlSchemaCollectionOwningSchemaField As String
        
        Private xmlSchemaCollectionNameField As String
        
        Private forceColumnEncryptionField As Boolean
        
        Private localeIdField As Integer
        
        Private sqlDbTypeField As SqlDbType
        
        Private sqlValueField As Object
        
        Private udtTypeNameField As String
        
        Private typeNameField As String
        
        Private offsetField As Integer
        
        Public Sub New()
            MyBase.New
            Me.forceColumnEncryptionField = false
        End Sub
        
        '''<remarks/>
        Public Property CompareInfo() As SqlCompareOptions
            Get
                Return Me.compareInfoField
            End Get
            Set
                Me.compareInfoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property XmlSchemaCollectionDatabase() As String
            Get
                Return Me.xmlSchemaCollectionDatabaseField
            End Get
            Set
                Me.xmlSchemaCollectionDatabaseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property XmlSchemaCollectionOwningSchema() As String
            Get
                Return Me.xmlSchemaCollectionOwningSchemaField
            End Get
            Set
                Me.xmlSchemaCollectionOwningSchemaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property XmlSchemaCollectionName() As String
            Get
                Return Me.xmlSchemaCollectionNameField
            End Get
            Set
                Me.xmlSchemaCollectionNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute(false)>  _
        Public Property ForceColumnEncryption() As Boolean
            Get
                Return Me.forceColumnEncryptionField
            End Get
            Set
                Me.forceColumnEncryptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocaleId() As Integer
            Get
                Return Me.localeIdField
            End Get
            Set
                Me.localeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SqlDbType() As SqlDbType
            Get
                Return Me.sqlDbTypeField
            End Get
            Set
                Me.sqlDbTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SqlValue() As Object
            Get
                Return Me.sqlValueField
            End Get
            Set
                Me.sqlValueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UdtTypeName() As String
            Get
                Return Me.udtTypeNameField
            End Get
            Set
                Me.udtTypeNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TypeName() As String
            Get
                Return Me.typeNameField
            End Get
            Set
                Me.typeNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Offset() As Integer
            Get
                Return Me.offsetField
            End Get
            Set
                Me.offsetField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.FlagsAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum SqlCompareOptions
        
        '''<remarks/>
        None = 1
        
        '''<remarks/>
        IgnoreCase = 2
        
        '''<remarks/>
        IgnoreNonSpace = 4
        
        '''<remarks/>
        IgnoreKanaType = 8
        
        '''<remarks/>
        IgnoreWidth = 16
        
        '''<remarks/>
        BinarySort = 32
        
        '''<remarks/>
        BinarySort2 = 64
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum SqlDbType
        
        '''<remarks/>
        BigInt
        
        '''<remarks/>
        Binary
        
        '''<remarks/>
        Bit
        
        '''<remarks/>
        [Char]
        
        '''<remarks/>
        DateTime
        
        '''<remarks/>
        [Decimal]
        
        '''<remarks/>
        Float
        
        '''<remarks/>
        Image
        
        '''<remarks/>
        Int
        
        '''<remarks/>
        Money
        
        '''<remarks/>
        NChar
        
        '''<remarks/>
        NText
        
        '''<remarks/>
        NVarChar
        
        '''<remarks/>
        Real
        
        '''<remarks/>
        UniqueIdentifier
        
        '''<remarks/>
        SmallDateTime
        
        '''<remarks/>
        SmallInt
        
        '''<remarks/>
        SmallMoney
        
        '''<remarks/>
        Text
        
        '''<remarks/>
        Timestamp
        
        '''<remarks/>
        TinyInt
        
        '''<remarks/>
        VarBinary
        
        '''<remarks/>
        VarChar
        
        '''<remarks/>
        [Variant]
        
        '''<remarks/>
        Xml
        
        '''<remarks/>
        Udt
        
        '''<remarks/>
        Structured
        
        '''<remarks/>
        [Date]
        
        '''<remarks/>
        Time
        
        '''<remarks/>
        DateTime2
        
        '''<remarks/>
        DateTimeOffset
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub JuanDiegoCompletedEventHandler(ByVal sender As Object, ByVal e As JuanDiegoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class JuanDiegoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetDatasetInf2CompletedEventHandler(ByVal sender As Object, ByVal e As GetDatasetInf2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatasetInf2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetDatasetInfCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatasetInfCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatasetInfCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetDatasetCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatasetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatasetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetDataset2CompletedEventHandler(ByVal sender As Object, ByVal e As GetDataset2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataset2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub VerificarIPCompletedEventHandler(ByVal sender As Object, ByVal e As VerificarIPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerificarIPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ExecCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub Exec2CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ExecSpReturnDsCompletedEventHandler(ByVal sender As Object, ByVal e As ExecSpReturnDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecSpReturnDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetDsFromSpCompletedEventHandler(ByVal sender As Object, ByVal e As GetDsFromSpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDsFromSpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetDsFromSp2CompletedEventHandler(ByVal sender As Object, ByVal e As GetDsFromSp2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDsFromSp2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetEmpresaCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmpresaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmpresaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetUsuariosByEmpresaCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsuariosByEmpresaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsuariosByEmpresaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetStatusUsuarioCompletedEventHandler(ByVal sender As Object, ByVal e As GetStatusUsuarioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStatusUsuarioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetDatosUsuarioCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatosUsuarioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatosUsuarioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ExecSpCompletedEventHandler(ByVal sender As Object, ByVal e As ExecSpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecSpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ExecSp2CompletedEventHandler(ByVal sender As Object, ByVal e As ExecSp2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecSp2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ConvertImageCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub PutArchivoRecibidoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetArchivoRecibidoCompletedEventHandler(ByVal sender As Object, ByVal e As GetArchivoRecibidoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetArchivoRecibidoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub DelArchivoRecibidoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AbrirSQLConsultasCompletedEventHandler(ByVal sender As Object, ByVal e As AbrirSQLConsultasCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AbrirSQLConsultasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub RJ45CompletedEventHandler(ByVal sender As Object, ByVal e As RJ45CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RJ45CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub PutCompraCompletedEventHandler(ByVal sender As Object, ByVal e As PutCompraCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutCompraCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
